{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Scope",
  "patterns": [
    {
      "include": "#aggregators"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#constructor"
    },
    {
      "include": "#csblock"
    },
    {
      "include": "#extractions"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#hints"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#parameters"
    },
    {
      "include": "#preprocessor"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#types"
    },
    {
      "include": "#using"
    },
    {
      "include": "#addition"
    }
  ],
  "repository": {
    "addition": {
      "patterns": [
        {
          "name": "support.function.scope",
          "match": "(\\w)+(?=\\()"
        },
        {
          "include": "#extractions"
        }
      ]
    },
    "aggregators": {
      "patterns": [
        {
          "match": "\\b(AND|ANY_VALUE|ARRAY_AGG|ARGMAX|AVG|BETWEEN|COUNT|COUNTIF|CUME_DIST|DENSE_RANK|FIRST|FIRST_VALUE|IN|LAST_VALUE|LIKE|LIST|MAP_AGG|MAX|MIN|NOT|NOT IN|NOT LIKE|NTILE|OR|PERCENT_RANK|PERCENTILE_CONT|PERCENTILE_DISC|RANK|ROW_NUMBER|STDEV|STDEVP|SUM|VAR|VARP)\\(\\b",
          "captures": {
            "1": {
              "name": "support.function.scope"
            }
          }
        },
        {
          "match": "\\b(COUNT)\\(",
          "captures": {
            "1": {
              "name": "support.function.scope"
            }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.scope",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.scope",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "constructor": {
      "patterns": [
        {
          "match": "(new )([^\\(]*)",
          "captures": {
            "1": {
              "name": "keyword.scope"
            },
            "2": {
              "patterns": [
                {
                  "include": "#typeName"
                }
              ]
            }
          }
        }
      ]
    },
    "csblock": {
      "patterns": [
        {
          "begin": "#CS",
          "beginCaptures": {
            "0": {
              "name": "keyword.scope"
            }
          },
          "end": "#ENDCS",
          "endCaptures": {
            "0": {
              "name": "keyword.scope"
            }
          },
          "patterns": [
            {
              "include": "source.cs"
            }
          ]
        },
        {
          "match": "(?<=CSHARP)\\(([^(]*)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#constructor"
                },
                {
                  "include": "#typeName"
                }
              ]
            }
          }
        }
      ]
    },
    "extractions": {
      "begin": "(?<=\bEXTRACT\b)",
      "end": "(?=\bFROM\b)",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#schemas"
        },
        {
          "include": "#types"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.scope",
          "match": "(?<=\\.)(\\w)+(?=\\()"
        }
      ]
    },
    "hints": {
      "patterns": [
        {
          "name": "keyword.scope",
          "match": "\\b(ALGORITHM|FROMBOTH|FROMLEFT|FROMRIGHT|FULLJOIN|IDXLOOKUP|LEVEL|LOWDISTINCTNESS|MINPARTITIONCOUNT|PARALLEL|PARTITION|PARTITIONCOUNT|PARTITIONFUNCTION|PARTITIONSPEC|REFINERANGE|REPARTITION|REQUIRED|ROUNDROBIN|ROWCOUNT|ROWSIZE|SERIAL|SKEW|SKEWFACTOR|SKEWJOIN|SPLITBROADCASTJOIN|SPLITJOIN|UNKNOWN)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.scope",
          "match": "\\b(ALL|ALTER|ALTEREVENTTIME|AND|ANTISEMIJOIN|ANY|APPLY|AS|ASC|ASSEMBLY|BEGIN|BETWEEN|BROADCASTLEFT|BROADCASTRIGHT|BY|CALL|CASE|CLIP|CLUSTERED|COMBINE|CREATE|CROSS|CSHARP|CURRENT|DATABASE|DECLARE|DEFAULT|DEFINE|DELETE|DEPLOY|DESC|DIRECT|DISTINCT|DROP|ELSE|END|ENDLOOP|ENTITYSPACE|EXCEPT|EXECUTE|EXISTS|EXPIRATION|EXPORT|EXTRACT|FOLLOWING|FROM|FULL|FUNC|FULLCROSS|GROUP|HASH|HAVING|IF|IMPORT|IN|INTO|INDEXLOOKUP|INNER|INTERSECT|IS|JOIN|LEFT|LOOP|MERGE|MODULE|MULTIPROCESS|NOT|NULL|ON|OPTION|OR|ORDER|OUTER|OUTPUT|OVER|PAIR|PARAMS|PARTITIONED|PATTERN|PRECEDING|PRESORT|PROCEDURE|PROCESS|PRODUCE|PUBLICATION|RANGE|READONLY|REDUCE|REFERENCE|REFERENCES|RESOURCE|RETURN|RIGHT|ROWSET|ROWSETS|SAMPLE|SCHEMA|SELECT|SEMIJOIN|SEQUENCE|SERIAL|SET|SORTED|SPARSE|SSTREAM|STREAMEXPIRY|STREAMSET|STRUCT|TABLE|THEN|TO|TOP|UNBOUNDED|UNIFORM|UNION|UNIQUE|UNIVERSE|UPDATE|USE|USING|VALUES|VIEW|WHEN|WHERE|WITH|WITHIN)\\b"
        },
        {
          "name": "keyword.scope",
          "match": "\\b(false|new|null|true)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\b(?<!\\.)(\\d+)((\\.(\\d+))|(d|D|l|L|m|M))?(?!\\.)\\b"
        }
      ]
    },
    "parameters": {
      "patterns": [
        {
          "name": "variable.parameter.scope",
          "match": "@?@\\b([A-Za-z0-9_]*)\\b"
        },
        {
          "name": "variable.parameter.scope",
          "match": "@@\\b([A-Za-z0-9_]*)\\b@@"
        }
      ]
    },
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.scope",
          "match": "#\\b(ANNOTATE|ARGUMENT|DECLARE|ELSE|ELSEIF|ENDIF|ENDLOOP|ERROR|EVALUATE|IF|INCLUDE|LOOP|SET|WARNING|WRITELINE)\\b"
        }
      ]
    },
    "schemas": {
      "patterns": [
        {
          "match": ":\\s*([A-Za-z0-9_\\.]*)(\\<(.*)\\>)?(\\?)?(\\[[0-9]*\\])?\\s*,?",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#typeName"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#typeName"
                }
              ]
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.scope",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.scope",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.scope",
          "begin": "@\"",
          "end": "\""
        },
        {
          "name": "string.quoted.single.scope",
          "match": "'.+'"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "keyword.scope",
          "match": "\\b(bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|object|short|ushort|string)(\\?)?\\b"
        },
        {
          "name": "entity.name.type.scope",
          "match": "\\b(DateTime|Guid|Math|String|TimeSpan)\\b"
        }
      ]
    },
    "typeName": {
      "patterns": [
        {
          "include": "#types"
        },
        {
          "name": "entity.name.type.scope",
          "match": "[^<>,\\[\\]\\?\\.\\(\\)]"
        }
      ]
    },
    "using": {
      "patterns": [
        {
          "match": "(?<=USING )([^\\(;]*)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#typeName"
                }
              ]
            }
          }
        }
      ]
    }
  },
  "scopeName": "source.scope"
}
